FROM python:3.13-slim@sha256:2a928e11761872b12003515ea59b3c40bb5340e2e5ecc1108e043f92be7e473d AS builder
WORKDIR /app

# Install system packages
# hadolint ignore=DL3008
RUN apt-get update && \
    apt-get install -y --no-install-recommends build-essential curl git && \
    rm -rf /var/lib/apt/lists/*

# Copy requirements
COPY requirements.txt ./

# Create a filtered requirements file that removes conflicting packages
RUN python -m venv /opt/venv && \
    grep -v -E '^(apache-flink|feast|opentelemetry-exporter-jaeger|opentelemetry-exporter-zipkin)' requirements.txt > requirements.filtered && \
    if ! /opt/venv/bin/pip install --no-cache-dir -r requirements.filtered; then \
      echo "Flask==2.3.3" > requirements.essential.txt && \
      echo "dash==2.14.1" >> requirements.essential.txt && \
      echo "pandas==2.1.4" >> requirements.essential.txt && \
      echo "plotly==5.15.0" >> requirements.essential.txt && \
      echo "gunicorn==23.0.0" >> requirements.essential.txt && \
      echo "python-dotenv==1.0.0" >> requirements.essential.txt && \
      echo "redis>=6.2.0" >> requirements.essential.txt && \
      echo "asyncpg>=0.30.0" >> requirements.essential.txt && \
      echo "requests==2.32.4" >> requirements.essential.txt && \
      echo "dash-bootstrap-components" >> requirements.essential.txt && \
      /opt/venv/bin/pip install --no-cache-dir -r requirements.essential.txt; \
    fi

FROM python:3.13-slim@sha256:2a928e11761872b12003515ea59b3c40bb5340e2e5ecc1108e043f92be7e473d
ENV PATH="/opt/venv/bin:$PATH"
ENV PYTHONPATH=/app:/app/yosai_intel_dashboard/src

# Install runtime dependencies
# hadolint ignore=DL3008
RUN apt-get update && \
    apt-get install -y --no-install-recommends curl && \
    rm -rf /var/lib/apt/lists/*

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv

ARG UID=1000
ARG GID=1000
RUN set -eux; \
    if addgroup --help 2>&1 | grep -q BusyBox; then \
        addgroup -g "${GID}" appuser; \
        adduser -D -u "${UID}" -G appuser appuser; \
    else \
        groupadd --gid "${GID}" appuser; \
        useradd --no-create-home --uid "${UID}" --gid "${GID}" appuser; \
    fi
WORKDIR /app
COPY --chown=appuser:appuser . /app
RUN chmod 0755 docker-entrypoint.sh \
    && find /app -type f -name '*.sh' -exec chmod 0755 {} \; \
    && find /app -type f \( -name '*.yaml' -o -name '*.yml' -o -name '*.conf' \) -exec chmod 0644 {} \;
USER appuser

EXPOSE 8050 8000

ENTRYPOINT ["/app/docker-entrypoint.sh"]
CMD ["wsgi.py"]

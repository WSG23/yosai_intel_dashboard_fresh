# coding: utf-8

"""
    Access Event Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class AccessEvent(BaseModel):
    """
    AccessEvent
    """ # noqa: E501
    event_id: StrictStr
    timestamp: datetime
    person_id: Optional[StrictStr] = None
    door_id: Optional[StrictStr] = None
    badge_id: Optional[StrictStr] = None
    access_result: StrictStr
    badge_status: Optional[StrictStr] = None
    door_held_open_time: Optional[Union[StrictFloat, StrictInt]] = None
    entry_without_badge: Optional[StrictBool] = None
    device_status: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["event_id", "timestamp", "person_id", "door_id", "badge_id", "access_result", "badge_status", "door_held_open_time", "entry_without_badge", "device_status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccessEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if person_id (nullable) is None
        # and model_fields_set contains the field
        if self.person_id is None and "person_id" in self.model_fields_set:
            _dict['person_id'] = None

        # set to None if door_id (nullable) is None
        # and model_fields_set contains the field
        if self.door_id is None and "door_id" in self.model_fields_set:
            _dict['door_id'] = None

        # set to None if badge_id (nullable) is None
        # and model_fields_set contains the field
        if self.badge_id is None and "badge_id" in self.model_fields_set:
            _dict['badge_id'] = None

        # set to None if badge_status (nullable) is None
        # and model_fields_set contains the field
        if self.badge_status is None and "badge_status" in self.model_fields_set:
            _dict['badge_status'] = None

        # set to None if door_held_open_time (nullable) is None
        # and model_fields_set contains the field
        if self.door_held_open_time is None and "door_held_open_time" in self.model_fields_set:
            _dict['door_held_open_time'] = None

        # set to None if entry_without_badge (nullable) is None
        # and model_fields_set contains the field
        if self.entry_without_badge is None and "entry_without_badge" in self.model_fields_set:
            _dict['entry_without_badge'] = None

        # set to None if device_status (nullable) is None
        # and model_fields_set contains the field
        if self.device_status is None and "device_status" in self.model_fields_set:
            _dict['device_status'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccessEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "event_id": obj.get("event_id"),
            "timestamp": obj.get("timestamp"),
            "person_id": obj.get("person_id"),
            "door_id": obj.get("door_id"),
            "badge_id": obj.get("badge_id"),
            "access_result": obj.get("access_result"),
            "badge_status": obj.get("badge_status"),
            "door_held_open_time": obj.get("door_held_open_time"),
            "entry_without_badge": obj.get("entry_without_badge"),
            "device_status": obj.get("device_status")
        })
        return _obj



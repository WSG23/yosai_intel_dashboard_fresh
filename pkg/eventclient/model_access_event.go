/*
Access Event Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the AccessEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccessEvent{}

// AccessEvent struct for AccessEvent
type AccessEvent struct {
	EventId string `json:"event_id"`
	Timestamp time.Time `json:"timestamp"`
	PersonId NullableString `json:"person_id,omitempty"`
	DoorId NullableString `json:"door_id,omitempty"`
	BadgeId NullableString `json:"badge_id,omitempty"`
	AccessResult string `json:"access_result"`
	BadgeStatus NullableString `json:"badge_status,omitempty"`
	DoorHeldOpenTime NullableFloat64 `json:"door_held_open_time,omitempty"`
	EntryWithoutBadge NullableBool `json:"entry_without_badge,omitempty"`
	DeviceStatus NullableString `json:"device_status,omitempty"`
}

type _AccessEvent AccessEvent

// NewAccessEvent instantiates a new AccessEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessEvent(eventId string, timestamp time.Time, accessResult string) *AccessEvent {
	this := AccessEvent{}
	this.EventId = eventId
	this.Timestamp = timestamp
	this.AccessResult = accessResult
	return &this
}

// NewAccessEventWithDefaults instantiates a new AccessEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessEventWithDefaults() *AccessEvent {
	this := AccessEvent{}
	return &this
}

// GetEventId returns the EventId field value
func (o *AccessEvent) GetEventId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value
// and a boolean to check if the value has been set.
func (o *AccessEvent) GetEventIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventId, true
}

// SetEventId sets field value
func (o *AccessEvent) SetEventId(v string) {
	o.EventId = v
}

// GetTimestamp returns the Timestamp field value
func (o *AccessEvent) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *AccessEvent) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *AccessEvent) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetPersonId returns the PersonId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccessEvent) GetPersonId() string {
	if o == nil || IsNil(o.PersonId.Get()) {
		var ret string
		return ret
	}
	return *o.PersonId.Get()
}

// GetPersonIdOk returns a tuple with the PersonId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccessEvent) GetPersonIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PersonId.Get(), o.PersonId.IsSet()
}

// HasPersonId returns a boolean if a field has been set.
func (o *AccessEvent) HasPersonId() bool {
	if o != nil && o.PersonId.IsSet() {
		return true
	}

	return false
}

// SetPersonId gets a reference to the given NullableString and assigns it to the PersonId field.
func (o *AccessEvent) SetPersonId(v string) {
	o.PersonId.Set(&v)
}
// SetPersonIdNil sets the value for PersonId to be an explicit nil
func (o *AccessEvent) SetPersonIdNil() {
	o.PersonId.Set(nil)
}

// UnsetPersonId ensures that no value is present for PersonId, not even an explicit nil
func (o *AccessEvent) UnsetPersonId() {
	o.PersonId.Unset()
}

// GetDoorId returns the DoorId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccessEvent) GetDoorId() string {
	if o == nil || IsNil(o.DoorId.Get()) {
		var ret string
		return ret
	}
	return *o.DoorId.Get()
}

// GetDoorIdOk returns a tuple with the DoorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccessEvent) GetDoorIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DoorId.Get(), o.DoorId.IsSet()
}

// HasDoorId returns a boolean if a field has been set.
func (o *AccessEvent) HasDoorId() bool {
	if o != nil && o.DoorId.IsSet() {
		return true
	}

	return false
}

// SetDoorId gets a reference to the given NullableString and assigns it to the DoorId field.
func (o *AccessEvent) SetDoorId(v string) {
	o.DoorId.Set(&v)
}
// SetDoorIdNil sets the value for DoorId to be an explicit nil
func (o *AccessEvent) SetDoorIdNil() {
	o.DoorId.Set(nil)
}

// UnsetDoorId ensures that no value is present for DoorId, not even an explicit nil
func (o *AccessEvent) UnsetDoorId() {
	o.DoorId.Unset()
}

// GetBadgeId returns the BadgeId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccessEvent) GetBadgeId() string {
	if o == nil || IsNil(o.BadgeId.Get()) {
		var ret string
		return ret
	}
	return *o.BadgeId.Get()
}

// GetBadgeIdOk returns a tuple with the BadgeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccessEvent) GetBadgeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BadgeId.Get(), o.BadgeId.IsSet()
}

// HasBadgeId returns a boolean if a field has been set.
func (o *AccessEvent) HasBadgeId() bool {
	if o != nil && o.BadgeId.IsSet() {
		return true
	}

	return false
}

// SetBadgeId gets a reference to the given NullableString and assigns it to the BadgeId field.
func (o *AccessEvent) SetBadgeId(v string) {
	o.BadgeId.Set(&v)
}
// SetBadgeIdNil sets the value for BadgeId to be an explicit nil
func (o *AccessEvent) SetBadgeIdNil() {
	o.BadgeId.Set(nil)
}

// UnsetBadgeId ensures that no value is present for BadgeId, not even an explicit nil
func (o *AccessEvent) UnsetBadgeId() {
	o.BadgeId.Unset()
}

// GetAccessResult returns the AccessResult field value
func (o *AccessEvent) GetAccessResult() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessResult
}

// GetAccessResultOk returns a tuple with the AccessResult field value
// and a boolean to check if the value has been set.
func (o *AccessEvent) GetAccessResultOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessResult, true
}

// SetAccessResult sets field value
func (o *AccessEvent) SetAccessResult(v string) {
	o.AccessResult = v
}

// GetBadgeStatus returns the BadgeStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccessEvent) GetBadgeStatus() string {
	if o == nil || IsNil(o.BadgeStatus.Get()) {
		var ret string
		return ret
	}
	return *o.BadgeStatus.Get()
}

// GetBadgeStatusOk returns a tuple with the BadgeStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccessEvent) GetBadgeStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BadgeStatus.Get(), o.BadgeStatus.IsSet()
}

// HasBadgeStatus returns a boolean if a field has been set.
func (o *AccessEvent) HasBadgeStatus() bool {
	if o != nil && o.BadgeStatus.IsSet() {
		return true
	}

	return false
}

// SetBadgeStatus gets a reference to the given NullableString and assigns it to the BadgeStatus field.
func (o *AccessEvent) SetBadgeStatus(v string) {
	o.BadgeStatus.Set(&v)
}
// SetBadgeStatusNil sets the value for BadgeStatus to be an explicit nil
func (o *AccessEvent) SetBadgeStatusNil() {
	o.BadgeStatus.Set(nil)
}

// UnsetBadgeStatus ensures that no value is present for BadgeStatus, not even an explicit nil
func (o *AccessEvent) UnsetBadgeStatus() {
	o.BadgeStatus.Unset()
}

// GetDoorHeldOpenTime returns the DoorHeldOpenTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccessEvent) GetDoorHeldOpenTime() float64 {
	if o == nil || IsNil(o.DoorHeldOpenTime.Get()) {
		var ret float64
		return ret
	}
	return *o.DoorHeldOpenTime.Get()
}

// GetDoorHeldOpenTimeOk returns a tuple with the DoorHeldOpenTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccessEvent) GetDoorHeldOpenTimeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DoorHeldOpenTime.Get(), o.DoorHeldOpenTime.IsSet()
}

// HasDoorHeldOpenTime returns a boolean if a field has been set.
func (o *AccessEvent) HasDoorHeldOpenTime() bool {
	if o != nil && o.DoorHeldOpenTime.IsSet() {
		return true
	}

	return false
}

// SetDoorHeldOpenTime gets a reference to the given NullableFloat64 and assigns it to the DoorHeldOpenTime field.
func (o *AccessEvent) SetDoorHeldOpenTime(v float64) {
	o.DoorHeldOpenTime.Set(&v)
}
// SetDoorHeldOpenTimeNil sets the value for DoorHeldOpenTime to be an explicit nil
func (o *AccessEvent) SetDoorHeldOpenTimeNil() {
	o.DoorHeldOpenTime.Set(nil)
}

// UnsetDoorHeldOpenTime ensures that no value is present for DoorHeldOpenTime, not even an explicit nil
func (o *AccessEvent) UnsetDoorHeldOpenTime() {
	o.DoorHeldOpenTime.Unset()
}

// GetEntryWithoutBadge returns the EntryWithoutBadge field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccessEvent) GetEntryWithoutBadge() bool {
	if o == nil || IsNil(o.EntryWithoutBadge.Get()) {
		var ret bool
		return ret
	}
	return *o.EntryWithoutBadge.Get()
}

// GetEntryWithoutBadgeOk returns a tuple with the EntryWithoutBadge field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccessEvent) GetEntryWithoutBadgeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EntryWithoutBadge.Get(), o.EntryWithoutBadge.IsSet()
}

// HasEntryWithoutBadge returns a boolean if a field has been set.
func (o *AccessEvent) HasEntryWithoutBadge() bool {
	if o != nil && o.EntryWithoutBadge.IsSet() {
		return true
	}

	return false
}

// SetEntryWithoutBadge gets a reference to the given NullableBool and assigns it to the EntryWithoutBadge field.
func (o *AccessEvent) SetEntryWithoutBadge(v bool) {
	o.EntryWithoutBadge.Set(&v)
}
// SetEntryWithoutBadgeNil sets the value for EntryWithoutBadge to be an explicit nil
func (o *AccessEvent) SetEntryWithoutBadgeNil() {
	o.EntryWithoutBadge.Set(nil)
}

// UnsetEntryWithoutBadge ensures that no value is present for EntryWithoutBadge, not even an explicit nil
func (o *AccessEvent) UnsetEntryWithoutBadge() {
	o.EntryWithoutBadge.Unset()
}

// GetDeviceStatus returns the DeviceStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccessEvent) GetDeviceStatus() string {
	if o == nil || IsNil(o.DeviceStatus.Get()) {
		var ret string
		return ret
	}
	return *o.DeviceStatus.Get()
}

// GetDeviceStatusOk returns a tuple with the DeviceStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccessEvent) GetDeviceStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeviceStatus.Get(), o.DeviceStatus.IsSet()
}

// HasDeviceStatus returns a boolean if a field has been set.
func (o *AccessEvent) HasDeviceStatus() bool {
	if o != nil && o.DeviceStatus.IsSet() {
		return true
	}

	return false
}

// SetDeviceStatus gets a reference to the given NullableString and assigns it to the DeviceStatus field.
func (o *AccessEvent) SetDeviceStatus(v string) {
	o.DeviceStatus.Set(&v)
}
// SetDeviceStatusNil sets the value for DeviceStatus to be an explicit nil
func (o *AccessEvent) SetDeviceStatusNil() {
	o.DeviceStatus.Set(nil)
}

// UnsetDeviceStatus ensures that no value is present for DeviceStatus, not even an explicit nil
func (o *AccessEvent) UnsetDeviceStatus() {
	o.DeviceStatus.Unset()
}

func (o AccessEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccessEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["event_id"] = o.EventId
	toSerialize["timestamp"] = o.Timestamp
	if o.PersonId.IsSet() {
		toSerialize["person_id"] = o.PersonId.Get()
	}
	if o.DoorId.IsSet() {
		toSerialize["door_id"] = o.DoorId.Get()
	}
	if o.BadgeId.IsSet() {
		toSerialize["badge_id"] = o.BadgeId.Get()
	}
	toSerialize["access_result"] = o.AccessResult
	if o.BadgeStatus.IsSet() {
		toSerialize["badge_status"] = o.BadgeStatus.Get()
	}
	if o.DoorHeldOpenTime.IsSet() {
		toSerialize["door_held_open_time"] = o.DoorHeldOpenTime.Get()
	}
	if o.EntryWithoutBadge.IsSet() {
		toSerialize["entry_without_badge"] = o.EntryWithoutBadge.Get()
	}
	if o.DeviceStatus.IsSet() {
		toSerialize["device_status"] = o.DeviceStatus.Get()
	}
	return toSerialize, nil
}

func (o *AccessEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"event_id",
		"timestamp",
		"access_result",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccessEvent := _AccessEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAccessEvent)

	if err != nil {
		return err
	}

	*o = AccessEvent(varAccessEvent)

	return err
}

type NullableAccessEvent struct {
	value *AccessEvent
	isSet bool
}

func (v NullableAccessEvent) Get() *AccessEvent {
	return v.value
}

func (v *NullableAccessEvent) Set(val *AccessEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessEvent(val *AccessEvent) *NullableAccessEvent {
	return &NullableAccessEvent{value: val, isSet: true}
}

func (v NullableAccessEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



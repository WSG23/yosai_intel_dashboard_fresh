openapi: 3.0.3
info:
  title: Y≈çsai Intel Dashboard API
  version: 2.0.0
  description: |
    Physical security intelligence and access control API.

    # Authentication
    Use Bearer token (JWT) for inter-service communication and require an
    `X-CSRF-Token` header on state-changing requests.

    # Versioning
    API version is included in the URL path (e.g., /v2/events).
  termsOfService: https://yosai.com/terms
  contact:
    email: api-support@yosai.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: https://api.yosai.com/v2
    description: Production
  - url: https://staging-api.yosai.com/v2
    description: Staging
  - url: http://localhost:8080/v2
    description: Development

security:
  - jwtAuth: []
  - csrfToken: []

tags:
  - name: Events
    description: Access control events
  - name: Analytics
    description: Analytics and reporting

paths:
  /events:
    get:
      summary: List access events
      operationId: listAccessEvents
      tags: [Events]
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /ai/suggest-devices:
    post:
      summary: Suggest device mappings
      tags: [Analytics]
      responses:
        '200':
          description: Successful response
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /mappings/columns:
    post:
      summary: Save column mappings
      tags: [Analytics]
      responses:
        '200':
          description: Successful response
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
  /mappings/devices:
    post:
      summary: Save device mappings
      tags: [Analytics]
      responses:
        '200':
          description: Successful response
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
  /mappings/save:
    post:
      summary: Save mappings
      tags: [Analytics]
      responses:
        '200':
          description: Successful response
        '500':
          $ref: '#/components/responses/ServerError'
  /process-enhanced:
    post:
      summary: Process data with mappings
      tags: [Analytics]
      responses:
        '200':
          description: Successful response
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /settings:
    get:
      summary: Get user settings
      tags: [Analytics]
      responses:
        '200':
          description: Successful response
    post:
      summary: Update user settings
      tags: [Analytics]
      responses:
        '200':
          description: Successful response
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      summary: Update user settings
      tags: [Analytics]
      responses:
        '200':
          description: Successful response
        '500':
          $ref: '#/components/responses/ServerError'
  /token/refresh:
    post:
      summary: Refresh access token
      tags: [Analytics]
      responses:
        '200':
          description: Successful response
        '401':
          $ref: '#/components/responses/Unauthorized'
  /upload:
    post:
      summary: Upload a file
      tags: [Analytics]
      responses:
        '202':
          $ref: '#/components/responses/Accepted'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
  /upload/status/{job_id}:
    get:
      summary: Get upload status
      parameters:
        - name: job_id
          in: path
          required: true
          schema:
            type: string
      tags: [Analytics]
      responses:
        '200':
          description: Successful response

components:
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Signed JWT present in the Authorization header
    csrfToken:
      type: apiKey
      in: header
      name: X-CSRF-Token
      description: Anti-CSRF token required for mutating operations
  schemas:
    Error:
      type: object
      required: [code, message]
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object
          additionalProperties: true
    AccessEvent:
      type: object
      properties:
        event_id:
          type: string
        person_id:
          type: string
        door_id:
          type: string
        timestamp:
          type: string
          format: date-time
        result:
          type: string
          enum: [granted, denied, tailgating, forced]
      required: [person_id, door_id, timestamp]
    EventListResponse:
      type: object
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/AccessEvent'
      
    WebhookAlertPayload:
      type: object
      required: [message]
      properties:
        message:
          type: string

    AnalyticsUpdate:
      type: object
      description: Generic analytics update broadcast over WebSocket.
      additionalProperties: true

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ServerError:
      description: Server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Accepted:
      description: Accepted

name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  PYTHONPATH: "${{ github.workspace }}:${{ github.workspace }}/src:${{ github.workspace }}/yosai_intel_dashboard:${{ github.workspace }}/yosai_intel_dashboard/src"

jobs:
  python-lint:
    name: Python Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt
      - name: Run black
        run: |
          set -euo pipefail
          black --check . | tee black.log
      - name: Run ruff
        run: |
          set -euo pipefail
          ruff . | tee ruff.log
      - name: Run mypy
        run: |
          set -euo pipefail
          mypy . | tee mypy.log
      - name: Upload Python lint reports
        if: ${{ always() }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: python-lint-reports
          path: |
            black.log
            ruff.log
            mypy.log

  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt
      - name: Run pytest with coverage
        env:
          PYTHONWARNINGS: error
        run: |
          set -euo pipefail
          pytest | tee pytest.log
          coverage xml
      - name: Upload coverage
        if: ${{ always() }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: backend-coverage
          path: |
            coverage.xml
            htmlcov
            pytest.log

  frontend-lint:
    name: Frontend Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Set up Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: 20
          cache: "npm"
      - name: Install npm dependencies
        run: npm ci
      - name: Run ESLint
        run: |
          set -euo pipefail
          npx eslint . --ext .js,.jsx,.ts,.tsx --max-warnings=0 | tee eslint.log
      - name: Run Prettier
        run: |
          set -euo pipefail
          npx prettier . --check | tee prettier.log
      - name: Run Stylelint
        run: |
          set -euo pipefail
          npx --yes stylelint "**/*.{css,scss}" --max-warnings=0 | tee stylelint.log
      - name: Upload frontend lint reports
        if: ${{ always() }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: frontend-lint-reports
          path: |
            eslint.log
            prettier.log
            stylelint.log

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Set up Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: 20
          cache: "npm"
      - name: Install npm dependencies
        run: npm ci
      - name: Run frontend tests with coverage
        run: |
          set -euo pipefail
          npm test -- --watchAll=false --coverage | tee frontend-tests.log
      - name: Upload frontend coverage
        if: ${{ always() }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: frontend-coverage
          path: |
            coverage
            frontend-tests.log

  golangci-lint:
    name: Go Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Set up Go
        uses: actions/setup-go@cd1f1e171f0d4b3a6570b6a6213b5636e33d7e40
        with:
          go-version: "1.22"
      - name: Install golangci-lint
        run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2
      - name: Run golangci-lint
        run: |
          set -euo pipefail
          golangci-lint run ./... --timeout=5m --max-issues-per-linter=0 --max-same-issues=0 | tee golangci-lint.log
      - name: Upload Go lint report
        if: ${{ always() }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: golangci-lint-report
          path: golangci-lint.log

  shellcheck:
    name: ShellCheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Install ShellCheck
        run: sudo apt-get update && sudo apt-get install -y shellcheck
      - name: Run ShellCheck
        run: |
          set -euo pipefail
          mapfile -t files < <(git ls-files '*.sh')
          if [ "${#files[@]}" -gt 0 ]; then shellcheck -x "${files[@]}" | tee shellcheck.log; else echo "No shell scripts found" | tee shellcheck.log; fi
      - name: Upload ShellCheck report
        if: ${{ always() }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: shellcheck-report
          path: shellcheck.log

  hadolint:
    name: Hadolint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Install hadolint
        run: |
          curl -sL https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64 -o hadolint
          chmod +x hadolint
          sudo mv hadolint /usr/local/bin/hadolint
      - name: Run hadolint
        run: |
          set -euo pipefail
          files=$(git ls-files '*Dockerfile*')
          if [ -n "$files" ]; then
            hadolint --config infra/.hadolint.yaml --failure-threshold warning $files | tee hadolint.log
          else
            echo "No Dockerfiles found" | tee hadolint.log
          fi
      - name: Upload hadolint report
        if: ${{ always() }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: hadolint-report
          path: hadolint.log

  build-test:
    name: Build Docker Images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Build images
        run: |
          set -euo pipefail
          docker compose \
            -f docker-compose.yml \
            -f docker-compose.kafka.yml \
            build

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt
      - name: Run integration tests
        run: |
          set -euo pipefail
          if ! docker info >/dev/null 2>&1; then
            echo "Docker not available - skipping integration tests."
            exit 0
          fi
          pytest tests/integration

  audits:
    name: Dependency and Vulnerability Scan
    needs:
      - backend-tests
      - frontend-tests
      - python-lint
      - frontend-lint
      - golangci-lint
      - shellcheck
      - hadolint
      - build-test
      - integration
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Dependency Review
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/dependency-review-action@fa6368072a20f00d241e99c93d82db12512ca42d
        with:
          fail-on-severity: critical
      - name: Scan with Trivy
        uses: aquasecurity/trivy-action@0.11.2
        with:
          scan-type: fs
          severity: CRITICAL
          exit-code: '1'
      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: "3.11"
      - name: Run pip-audit
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip pip-audit
          pip-audit -r requirements.txt -r requirements-dev.txt | tee pip-audit.log
      - name: Set up Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: 20
      - name: Run npm audit
        run: |
          set -euo pipefail
          npm ci --no-audit
          npm audit --audit-level=high | tee npm-audit.log
      - name: Set up Go
        uses: actions/setup-go@cd1f1e171f0d4b3a6570b6a6213b5636e33d7e40
        with:
          go-version: "1.22"
      - name: Run govulncheck
        run: |
          set -euo pipefail
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./... | tee govulncheck.log
      - name: Upload audit reports
        if: ${{ always() }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: audit-reports
          path: |
            pip-audit.log
            npm-audit.log
            govulncheck.log

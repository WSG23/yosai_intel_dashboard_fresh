name: Unified CI

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  validate-configs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: azure/setup-kubectl@v3
      - name: Validate Kubernetes manifests
        run: |
          kubectl apply --dry-run=client --validate=false -f k8s/base
          kubectl apply --dry-run=client --validate=false -f k8s/production
          kubectl apply --dry-run=client --validate=false -f k8s/canary

  clean-arch-check:
    # fix: dependency should be array
    needs: [validate-configs]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - run: pip install -r requirements.lock
      - name: Validate directory structure
        run: python scripts/validate_structure.py
      - name: Verify imports
        run: PYTHONPATH=. python scripts/verify_imports.py

  lint:
    needs: [validate-configs, clean-arch-check]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        lang: [python, go]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        if: matrix.lang == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install Python deps
        if: matrix.lang == 'python'
        run: |
          pip install -r requirements.lock
          pip install black flake8 mypy bandit
      - name: Python linters
        if: matrix.lang == 'python'
        run: |
          black --check . --line-length 88 --verbose
          flake8 . --max-line-length 88 -v
          mypy .
          bandit -r . --severity-level high
      - name: Validate directory structure
        if: matrix.lang == 'python'
        run: python scripts/validate_structure.py
      - name: Set up Go
        if: matrix.lang == 'go'
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      - name: Install golangci-lint
        if: matrix.lang == 'go'
        run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
      - name: Go linters
        if: matrix.lang == 'go'
        run: |
          golangci-lint run ./...

  test:
    # fix: dependency should be array
    needs: [lint]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        lang: [python, go]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        if: matrix.lang == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install Python deps
        if: matrix.lang == 'python'
        run: |
          pip install -r requirements.lock
          pip install -r requirements-test.txt
      - name: Run Python tests
        if: matrix.lang == 'python'
        run: pytest --cov=./ --cov-report=xml -q
      - name: Upload Python coverage
        if: matrix.lang == 'python'
        uses: actions/upload-artifact@v4
        with:
          name: python-coverage
          path: coverage.xml
      - name: Upload coverage to Codecov
        if: matrix.lang == 'python'
        uses: codecov/codecov-action@v3
        with:
          files: coverage.xml
      - name: Set up Go
        if: matrix.lang == 'go'
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      - name: Run Go tests
        if: matrix.lang == 'go'
        run: ./scripts/test-coverage.sh
      - name: Upload Go coverage
        if: matrix.lang == 'go'
        uses: actions/upload-artifact@v4
        with:
          name: go-coverage
          path: gateway/coverage.out

  frontend-test:
    # fix: dependency should be array
    needs: [lint]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: yosai-upload/package-lock.json
      - name: Install deps
        run: npm ci --prefix yosai-upload
      - name: Run frontend tests
        run: npm test --prefix yosai-upload -- --coverage --watchAll=false
      - name: Upload frontend coverage
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: yosai-upload/coverage/lcov.info

  frontend-build:
    # fix: dependency should be array
    needs: [frontend-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: yosai-upload/package-lock.json
      - name: Install deps
        run: npm ci --prefix yosai-upload
      - name: Build frontend
        run: npm run build --prefix yosai-upload
      - uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: yosai-upload/build

  build-images:
    needs: [test, frontend-build]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - name: gateway
            context: .
            dockerfile: Dockerfile.gateway
          - name: analytics
            context: .
            dockerfile: Dockerfile
          - name: event-ingestion
            context: ./services/event-ingestion/
            dockerfile: Dockerfile
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Determine image tag
        id: vars
        run: |
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            echo "tag=${GITHUB_REF#refs/tags/}" >> "$GITHUB_OUTPUT"
          else
            echo "tag=sha-${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"
          fi
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          dockerfile: ${{ matrix.dockerfile }}
          push: true
          tags: |
            ghcr.io/${{ github.repository }}-${{ matrix.name }}:latest
            ghcr.io/${{ github.repository }}-${{ matrix.name }}:${{ steps.vars.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    # fix: dependency should be array
    needs: [build-images]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - run: pip install -r requirements.lock
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
      - name: Configure kubeconfig
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > "$HOME/.kube/config"
      - name: Deploy canary
        run: |
          kubectl apply -f k8s/canary
      - name: Wait for canary rollout
        run: |
          kubectl rollout status deployment/yosai-dashboard-canary --timeout=120s
      - name: Health check canary
        run: |
          kubectl wait --for=condition=ready pod -l app=yosai-dashboard,track=canary --timeout=60s
      - name: Promote canary to production
        run: |
          kubectl apply -f k8s/base
          kubectl apply -f k8s/production
          kubectl delete -f k8s/canary


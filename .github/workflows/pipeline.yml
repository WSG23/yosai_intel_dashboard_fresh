name: CI Pipeline

on:
  pull_request:
  push:
    branches: [main]

permissions:
  contents: read
  security-events: write
  actions: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: pip
        cache-dependency-path: |
          requirements.txt
          requirements-dev.txt
    - name: Install Python deps (prefer wheels)
      env:
        PIP_PREFER_BINARY: "1"
        PIP_ONLY_BINARY: ":all:"
      run: |
        python -m pip install -U pip setuptools wheel
        pip install 'numpy>=1.23,<2.0'
        pip install -r requirements.txt || pip install --no-build-isolation -r requirements.txt
        if [ -f requirements-dev.txt ]; then
          pip install -r requirements-dev.txt || pip install --no-build-isolation -r requirements-dev.txt
        fi
    - name: Build project
      run: |
        make build
    - name: Run unit tests
      run: |
        ./scripts/run_tests_and_smoke.sh

  sql-scan:
    needs: build-test
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: Check for unsafe SQL strings
      run: |
        CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD -- '*.py')
        if [ -n "$CHANGED_FILES" ]; then
          echo "Scanning changed files:"
          echo "$CHANGED_FILES"
          PYTHONPATH=. python scripts/sql_migration_report.py $CHANGED_FILES
          PYTHONPATH=. python scripts/detect_sql_strings.py $CHANGED_FILES
        else
          echo "No Python files changed."
        fi

  profile-critical:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: Install Python deps (prefer wheels)
      env:
        PIP_PREFER_BINARY: "1"
        PIP_ONLY_BINARY: ":all:"
      run: |
        python -m pip install -U pip setuptools wheel
        pip install 'numpy>=1.23,<2.0'
        pip install -r requirements.txt || pip install --no-build-isolation -r requirements.txt
        if [ -f requirements-dev.txt ]; then
          pip install -r requirements-dev.txt || pip install --no-build-isolation -r requirements-dev.txt
        fi
    - name: Run profiling
      run: PYTHONPATH=. python scripts/profile_critical_paths.py
    - name: Upload profiling report
      uses: actions/upload-artifact@v4
      with:
        name: profiling-report
        path: |
          profiling_report.prof
          profiling_report.txt

  code-review:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: Run code review analysis
      run: |
        python scripts/find_duplicate_functions.py > code_review_report.md
    - name: Upload code review report
      uses: actions/upload-artifact@v4
      with:
        name: code-review-report
        path: code_review_report.md

  security-scan:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: Run vulnerability scan
      run: python scripts/security_scan.py
    - name: Run Bandit
      run: bandit -r . -lll
    - name: Run Safety
      run: safety check --full-report --fail-on=high
    - name: Scan JS dependencies
      run: npm audit --audit-level=high
    - name: Scan for secrets
      run: python scripts/security_scan_secrets.py
    - name: Generate security report
      id: report
      continue-on-error: true
      run: python security/reporting.py
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: |
          security-report.md
          security-report.html
    - name: Comment remediation steps
      if: ${{ github.event_name == 'pull_request' }}
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const body = fs.readFileSync('security-report.md', 'utf8');
          github.rest.issues.createComment({
            ...context.repo,
            issue_number: context.issue.number,
            body,
          });
    - name: Fail on high or critical
      if: ${{ steps.report.outputs.severity == 'HIGH' ||
        steps.report.outputs.severity == 'CRITICAL' }}
      run: exit 1

  trivy-scan:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Dependency Review
      if: ${{ github.event_name == 'pull_request' }}
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: critical
    - name: Fork PR noop
      if: ${{ github.event.pull_request.head.repo.fork }}
      run: 'echo "Fork PR: secret-protected step skipped (Trivy)."'
    - name: Scan with Trivy
      if: ${{ github.event.pull_request.head.repo.fork == false }}
      uses: aquasecurity/trivy-action@0.32.0
      with:
        scan-type: fs
        format: sarif
        output: trivy-results.sarif
        exit-code: '1'
        severity: CRITICAL
    - uses: actions/upload-artifact@v4
      if: ${{ github.event.pull_request.head.repo.fork == false }}
      with:
        name: trivy-results
        path: trivy-results.sarif
  snyk-scan:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
    - name: Fork PR noop
      if: ${{ github.event.pull_request.head.repo.fork }}
      run: 'echo "Fork PR: secret-protected job skipped (noop)."'
    - uses: actions/checkout@v4
      if: ${{ github.event.pull_request.head.repo.fork == false }}
    - uses: snyk/actions/setup@v1
      if: ${{ github.event.pull_request.head.repo.fork == false }}
    - name: Scan with Snyk
      if: ${{ github.event.pull_request.head.repo.fork == false }}
      run: snyk test --severity-threshold=high --json > snyk-results.json
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    - uses: actions/upload-artifact@v4
      if: ${{ github.event.pull_request.head.repo.fork == false }}
      with:
        name: snyk-results
        path: snyk-results.json
  owasp-zap:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
    - name: Fork PR noop
      if: ${{ github.event.pull_request.head.repo.fork }}
      run: 'echo "Fork PR: secret-protected job skipped (noop)."'
    - uses: actions/checkout@v3
      if: ${{ github.event.pull_request.head.repo.fork == false }}
    - name: OWASP ZAP baseline scan
      if: ${{ github.event.pull_request.head.repo.fork == false }}
      uses: zaproxy/action-baseline@v0.14.0
      with:
        target: http://localhost:8000
        fail_action: true
  secret-scan:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: pip install detect-secrets
    - name: Run secret scan
      run: |
        python scripts/security_scan_secrets.py || exit 1
    - uses: actions/upload-artifact@v4
      if: always()
      with:
        name: secret-scan-report
        path: secret-scan-report.json

  container-security:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
    - name: Fork PR noop
      if: ${{ github.event.pull_request.head.repo.fork }}
      run: 'echo "Fork PR: secret-protected job skipped (noop)."'
    - uses: actions/checkout@v3
      if: ${{ github.event.pull_request.head.repo.fork == false }}
    - name: Build gateway Docker image
      if: ${{ github.event.pull_request.head.repo.fork == false }}
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.gateway
        tags: gateway-image
        load: true
    - name: Run container security checks
      if: ${{ github.event.pull_request.head.repo.fork == false }}
      run: tests/container/security_checks.sh gateway-image
  release:
    needs: [trivy-scan, snyk-scan, security-scan, owasp-zap, container-security]

    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
      - name: Fork PR noop
        if: ${{ github.event.pull_request.head.repo.fork }}
        run: 'echo "Fork PR: secret-protected job skipped (noop)."'
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install Node deps (CI-safe)
        env:
          NPM_CONFIG_LEGACY_PEER_DEPS: "true"
        run: |
          npm ci --no-audit --prefer-offline
      - name: Semantic release
        uses: cycjimmy/semantic-release-action@v4
        with:
          semantic_version: 21
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-dev:
    needs: release
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    environment: development
    steps:
    - name: Fork PR noop
      if: ${{ github.event.pull_request.head.repo.fork }}
      run: 'echo "Fork PR: secret-protected job skipped (noop)."'
    - uses: actions/checkout@v3
    - name: Fetch secrets via ESO
      run: |
        kubectl apply -f k8s/external-secrets/dev.yaml
        kubectl wait --for=condition=available externalsecret/dev-secrets --timeout=60s
    - name: Deploy to dev with Helm
      run: |
        helm upgrade --install dashboard helm/chart -f helm/values-dev.yaml --set image.tag=${{ github.sha }}
    - name: Run smoke tests
      run: |
        python scripts/manual_tests/check_endpoints.py || (helm rollback dashboard && exit 1)

  deploy-staging:
    needs: deploy-dev
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    environment: staging
    steps:
    - name: Fork PR noop
      if: ${{ github.event.pull_request.head.repo.fork }}
      run: 'echo "Fork PR: secret-protected job skipped (noop)."'
    - uses: actions/checkout@v3
    - name: Fetch secrets via ESO
      run: |
        kubectl apply -f k8s/external-secrets/staging.yaml
        kubectl wait --for=condition=available externalsecret/staging-secrets --timeout=60s
    - name: Deploy to staging with Helm
      run: |
        helm upgrade --install dashboard helm/chart -f helm/values-staging.yaml --set image.tag=${{ github.sha }}
    - name: Run smoke tests
      run: |
        python scripts/manual_tests/check_endpoints.py || (helm rollback dashboard && exit 1)

  deploy-prod:
    needs: deploy-staging
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    environment: production
    steps:
    - name: Fork PR noop
      if: ${{ github.event.pull_request.head.repo.fork }}
      run: 'echo "Fork PR: secret-protected job skipped (noop)."'
    - uses: actions/checkout@v3
    - name: Fetch secrets via ESO
      run: |
        kubectl apply -f k8s/external-secrets/prod.yaml
        kubectl wait --for=condition=available externalsecret/prod-secrets --timeout=60s
    - name: Deploy to prod with ArgoCD
      run: |
        argocd app sync dashboard-prod
    - name: Run smoke tests
      run: |
        python scripts/manual_tests/check_endpoints.py || (argocd app rollback dashboard-prod && exit 1)

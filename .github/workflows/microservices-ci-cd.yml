name: Microservices CI/CD

on:
  push:
    branches: [ main ]
  pull_request:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/${{ github.repository }}

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      microservices_changed: ${{ steps.filter.outputs.microservices }}
    steps:
      - uses: actions/checkout@v3
      - id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            microservices:
              - 'services/**'
              - 'k8s/**'
              - '**/Dockerfile*'

  validate-structure:
    needs: detect-changes
    if: needs.detect-changes.outputs.microservices_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.lock') }}
      - run: pip install -r requirements.lock
      - run: python scripts/create_symlinks.py
      - run: python scripts/validate_structure.py
      - run: ./validate_migration.sh

  test:
    needs: validate-structure
    if: needs.detect-changes.outputs.microservices_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      - run: pip install -r requirements.lock
      - run: pip install -r requirements-test.txt
      - run: python scripts/create_symlinks.py
      - run: pytest --cov=services/analytics_microservice --cov=services/event-ingestion --cov-report=xml --cov-fail-under=80 tests tests/migration
      - uses: actions/upload-artifact@v4
        with:
          name: python-microservices-coverage
          path: coverage.xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: coverage.xml
      - run: ./scripts/test-coverage.sh
      - uses: actions/upload-artifact@v4
        with:
          name: go-microservices-coverage
          path: gateway/coverage.out

  security-scan:
    needs: test
    if: needs.detect-changes.outputs.microservices_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Trivy
        uses: aquasecurity/setup-trivy@v0.2.3
        with:
          version: v0.64.1
          cache: true
      - name: Update vulnerability database
        run: trivy --download-db-only
      - name: Dependency and license scan
        run: trivy fs --scanners vuln,license --severity HIGH,CRITICAL --ignore-unfixed --exit-code 1 --ignorefile .trivyignore .
      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          path: .
          format: spdx-json
          output-file: sbom.json
      - uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.json

  build-image:
    needs: security-scan
    if: needs.detect-changes.outputs.microservices_changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - name: gateway
            context: .
            dockerfile: Dockerfile.gateway
          - name: analytics
            context: .
            dockerfile: Dockerfile
          - name: event-ingestion
            context: ./services/event-ingestion/
            dockerfile: Dockerfile
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - run: python scripts/create_symlinks.py
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          dockerfile: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ env.IMAGE_NAME }}-${{ matrix.name }}:${{ github.sha }}

  validate-manifests:
    needs: build-image
    if: needs.detect-changes.outputs.microservices_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Validate manifests
        run: |
          kubectl apply --dry-run=client -f k8s/base
          kubectl apply --dry-run=client -f k8s/production

  deploy:
    needs: validate-manifests
    if: github.ref == 'refs/heads/main' && needs.detect-changes.outputs.microservices_changed == 'true'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - run: pip install -r requirements.lock
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
      - name: Configure kubeconfig
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > "$HOME/.kube/config"
      - name: Deploy canary
        run: |
          kubectl apply -f k8s/canary
      - name: Wait for canary rollout
        run: |
          kubectl rollout status deployment/yosai-dashboard-canary --timeout=120s
      - name: Health check canary
        run: |
          kubectl wait --for=condition=ready pod -l app=yosai-dashboard,track=canary --timeout=60s
      - name: Promote canary to production
        run: |
          kubectl apply -f k8s/base
          kubectl apply -f k8s/production
          kubectl delete -f k8s/canary
      - name: Rollback on failure
        if: failure()
        run: kubectl rollout undo deployment/yosai-dashboard


#!/usr/bin/env python3
"""
Unicode Surrogate Character Fix Module
Handles problematic Unicode that can't be encoded in UTF-8
"""

import re
import pandas as pd
from typing import Any, Union
import logging

logger = logging.getLogger(__name__)


class UnicodeFixEngine:
    """Consolidated Unicode handling for MVP"""
    
    # Surrogate pair regex (U+D800-U+DFFF)
    SURROGATE_PATTERN = re.compile(r'[\ud800-\udfff]')
    
    # Common problematic patterns
    PROBLEMATIC_PATTERNS = [
        (r'[\ud800-\udfff]', ''),  # Remove surrogates
        (r'[\u0000-\u0008\u000B\u000C\u000E-\u001F\u007F-\u009F]', ''),  # Control chars
        (r'[^\u0020-\u007E\u00A0-\u024F\u1E00-\u1EFF]', '?'),  # Non-printable to ?
    ]
    
    @classmethod
    def clean_text(cls, text: Union[str, Any]) -> str:
        """Clean individual text value"""
        if not isinstance(text, str):
            return str(text) if text is not None else ""
            
        # Apply all patterns
        cleaned = text
        for pattern, replacement in cls.PROBLEMATIC_PATTERNS:
            cleaned = re.sub(pattern, replacement, cleaned)
            
        # Ensure valid UTF-8
        try:
            cleaned.encode('utf-8')
            return cleaned
        except UnicodeEncodeError:
            # Last resort: encode/decode with error handling
            return cleaned.encode('utf-8', errors='replace').decode('utf-8')
            
    @classmethod
    def fix_dataframe(cls, df: pd.DataFrame) -> pd.DataFrame:
        """Fix all text columns in DataFrame"""
        df_copy = df.copy()
        
        for column in df_copy.columns:
            if df_copy[column].dtype == 'object':  # String columns
                try:
                    df_copy[column] = df_copy[column].apply(cls.clean_text)
                except Exception as e:
                    logger.warning(f"Failed to clean column {column}: {e}")
                    # Continue with other columns
                    
        return df_copy
        
    @classmethod
    def safe_file_read(cls, filepath: str, **kwargs) -> pd.DataFrame:
        """Read file with Unicode error handling"""
        encodings = ['utf-8-sig', 'utf-8', 'latin-1', 'cp1252', 'iso-8859-1']
        
        for encoding in encodings:
            try:
                df = pd.read_csv(filepath, encoding=encoding, **kwargs)
                # Clean the data immediately after reading
                return cls.fix_dataframe(df)
            except (UnicodeDecodeError, UnicodeError):
                continue
            except Exception as e:
                # Non-Unicode error, don't try other encodings
                logger.error(f"Non-Unicode error reading file: {e}")
                break
                
        raise ValueError(f"Could not read file {filepath} with any encoding")
        
    @classmethod
    def safe_file_write(cls, df: pd.DataFrame, filepath: str, **kwargs) -> bool:
        """Write file with Unicode safety"""
        try:
            # Clean before writing
            clean_df = cls.fix_dataframe(df)
            
            # Write with safe encoding
            clean_df.to_csv(filepath, encoding='utf-8-sig', **kwargs)
            return True
            
        except Exception as e:
            logger.error(f"Failed to write file {filepath}: {e}")
            return False


# Replacement functions for your existing data_enhancer.py
def sanitize_dataframe(df: pd.DataFrame) -> pd.DataFrame:
    """Drop-in replacement for existing function"""
    return UnicodeFixEngine.fix_dataframe(df)


def clean_unicode_text(text: str) -> str:
    """Drop-in replacement for existing function"""
    return UnicodeFixEngine.clean_text(text)


# Test function
def test_unicode_fixes():
    """Test Unicode fixes with problematic data"""
    test_data = {
        'normal': ['hello', 'world'],
        'unicode': ['café', 'résumé'],
        'problematic': ['\ud83d\ude00\ud800\udc00', 'test\u0000control'],
        'mixed': ['normal text', 'café\ud83d\ude00 mixed']
    }
    
    df = pd.DataFrame(test_data)
    print("Original DataFrame:")
    print(df)
    
    fixed_df = UnicodeFixEngine.fix_dataframe(df)
    print("\nFixed DataFrame:")
    print(fixed_df)
    
    # Test individual text cleaning
    problematic_text = "Test\ud800\udc00 with surrogates\u0000 and café"
    cleaned = UnicodeFixEngine.clean_text(problematic_text)
    print(f"\nText cleaning test:")
    print(f"Original: {repr(problematic_text)}")
    print(f"Cleaned:  {repr(cleaned)}")


if __name__ == "__main__":
    test_unicode_fixes()